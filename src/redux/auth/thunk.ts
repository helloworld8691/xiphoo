import * as ACTIONS from './actions';
import type { ThunkAction } from 'redux-thunk';
import type { StateType } from '../store';
import type { ActionsType } from './reducer';
import Amplify, { Auth } from 'aws-amplify';
import { AWSUser } from './user';
import { COGNITO_CLIENT_ID, COGNITO_CLIENT_POOL, IDENTITY_POOL_ID } from '../../../config';

Amplify.configure({
  Auth: {
    identityPoolId: IDENTITY_POOL_ID,
    region: 'eu-central-1',
    userPoolId: COGNITO_CLIENT_POOL,
    userPoolWebClientId: COGNITO_CLIENT_ID
  },
});

// (async () => {
// 	try {
// 		// let a: AWSUser = await Auth.signIn('test@easymobiz.com', 'O#hosha3n7aek');
// 		let a: AWSUser = Auth.currentUserInfo()
//     //console.log("ðŸš€ ~ file: thunk.ts ~ line 21 ~ a", a)

//     //console.log("ðŸš€ ~ file: thunk.ts ~ line 26 ~ a.username", a.username)
//     //console.log("ðŸš€ ~ file: thunk.ts ~ line 26 ~ a.signInUserSession.accessToken.jwtToken", a.signInUserSession.accessToken.jwtToken)
// 		//console.log("ðŸš€ ~ file: thunk.ts ~ line 27 ~ a.attributes", a.attributes)
// 	} catch (error) {
//     //console.log("ðŸš€ ~ file: thunk.ts ~ line 23 ~ error", error)
// 	}
// })();

// Generated by https://quicktype.io

let interval: NodeJS.Timeout;


export const signIn = (email: string, password: string, callback: ()=> void): ThunkAction<
  void,
  StateType,
  never,
  ActionsType
> => async (dispatch, getState) => {
  try {
    dispatch(ACTIONS.signInRequestAction());
    let a: AWSUser = await Auth.signIn(email, password);
    //console.log("ðŸš€ ~ file: thunk.ts ~ line 44 ~ >=> ~ a", a)

    dispatch(ACTIONS.signInSuccessAction({
      email: a.attributes.email,
      refreshToken: a.signInUserSession.refreshToken.token,
      token: a.signInUserSession.idToken.jwtToken,
      username: a.username
    }));
    if (interval) clearInterval(interval);

    interval = setInterval(async () => {
      try {

        let session = await Auth.currentSession();
        let idToken = session.getIdToken().getJwtToken()
        dispatch(ACTIONS.signInSuccessAction({
          email: a.attributes.email,
          refreshToken: a.signInUserSession.refreshToken.token,
          token: idToken,
          username: a.username
        }));
      } catch (error) {
        dispatch(ACTIONS.signOutSuccessAction());
      }

    }, 60 * 1000 * 15)

    callback()
    return true;
  } catch (error) {
    //console.log("ðŸš€ ~ file: thunk.ts ~ line 53 ~ >=> ~ error", error)
    dispatch(ACTIONS.signInFailureAction(error));
  }
};

export const signOut = (): ThunkAction<
  void,
  StateType,
  never,
  ActionsType
> => async (dispatch, getState) => {
  try {
    dispatch(ACTIONS.signOutRequestAction());
    await Auth.signOut({ global: true });
    dispatch(ACTIONS.signOutSuccessAction());
  } catch (error) {
    dispatch(ACTIONS.signOutFailureAction(error));
  }
};

// export const startAutoSignIn = (): ThunkAction<
//   void,
//   StateType,
//   never,
//   ActionsType
// > => async (dispatch, getState) => {
//   try {
// 		dispatch(ACTIONS.startAutoSignInRequestAction());

//     let a = await Auth.currentSession();

//     //dispatch(ACTIONS.startAutoSignInSuccessAction(payload: any));
//   } catch (error) {
//     dispatch(ACTIONS.startAutoSignInFailureAction(error));
//   }
// };
